{
    "request_id": "DOCKRACLE_REWRITE_001",
    "task": "Analyze and rewrite the provided React application source code to fix a critical rendering and logic error.",
    "system_context": "You are an expert senior React developer. The provided application is failing to render correctly and has a logical inconsistency between its frontend and backend communication protocols. Your task is to analyze all the provided source code components, identify the root cause of the failure, and provide a complete, rewritten, and fully functional version of the main `App.jsx` file that resolves all issues. The final `App.jsx` should be a masterpiece of modern, clean, and robust React code.",
    "application_source_code": [
      {
        "file_path": "frontend/src/main.jsx",
        "code": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <App />\n)\n"
      },
      {
        "file_path": "frontend/src/index.css",
        "code": "/* Import the Sacred Font: Fira Code */\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;700&display=swap');\n\n/* Thematic Duality: The Dracula Palette */\n:root {\n  /* Dracula Dark Theme (Default) */\n  --background-color: #282a36;\n  --text-color: #f8f8f2;\n  --primary-accent-color: #bd93f9; /* Purple */\n  --secondary-accent-color: #44475a;\n  --border-color: #6272a4;\n  --button-bg-color: #bd93f9;\n  --button-text-color: #f8f8f2;\n  --message-user-bg: #44475a;\n  --message-user-text: #f8f8f2;\n  --message-oracle-bg: #6272a4;\n  --message-oracle-text: #f8f8f2;\n  --font-family: 'Fira Code', monospace;\n}\n\n/* The Sacred Scripture for the Light Theme! */\n@media (prefers-color-scheme: light) {\n  :root {\n    --background-color: #f8f8f2;\n    --text-color: #282a36;\n    --primary-accent-color: #ff79c6; /* Pink */\n    --secondary-accent-color: #e6e6e6;\n    --border-color: #bd93f9;\n    --button-bg-color: #ff79c6;\n    --button-text-color: #f8f8f2;\n    --message-user-bg: #e6e6e6;\n    --message-user-text: #282a36;\n    --message-oracle-bg: #f1f1f1;\n    --message-oracle-text: #282a36;\n  }\n}\n\nbody {\n  margin: 0;\n  font-family: var(--font-family);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: var(--background-color);\n  color: var(--text-color);\n}\n\n/* General Styles for our magnificent components */\n.app-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n  max-width: 100%;\n  padding: 20px;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.chat-history {\n  width: 90%;\n  max-width: 800px;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 20px;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  margin-bottom: 20px;\n  background-color: var(--secondary-accent-color);\n}\n\n.prompt-form {\n  width: 90%;\n  max-width: 800px;\n}\n\n.prompt-input {\n  width: 100%;\n  padding: 15px;\n  font-size: 1.1em;\n  font-family: var(--font-family);\n  background-color: var(--secondary-accent-color);\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  box-sizing: border-box;\n}\n\n.button-group {\n  margin-top: 10px;\n  display: flex;\n  gap: 10px;\n}\n\n.button {\n  padding: 10px 20px;\n  cursor: pointer;\n  background-color: var(--button-bg-color);\n  border: none;\n  border-radius: 8px;\n  color: var(--button-text-color);\n  font-family: var(--font-family);\n  font-weight: 500;\n}\n\n.button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* Responsive Styles */\n@media (max-width: 768px) {\n  .app-container {\n    padding: 10px !important;\n  }\n  .chat-history, .prompt-form {\n    width: 95% !important;\n  }\n  .prompt-input {\n    font-size: 1em !important;\n  }\n}\n"
      },
      {
        "file_path": "frontend/src/App.css",
        "code": "#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n"
      },
      {
        "file_path": "frontend/src/components/ChatHistory.jsx",
        "code": "import React, { forwardRef } from 'react';\nimport ReactMarkdown from 'react-markdown'; // We summon the new scribe!\n\nconst ChatHistory = forwardRef(({ messages }, ref) => {\n  return (\n    <div ref={ref} className=\"chat-history\">\n      {messages.map((msg, index) => (\n        <div key={index} style={{ \n          marginBottom: '15px',\n          textAlign: msg.sender === 'user' ? 'right' : 'left'\n        }}>\n          <div style={{ \n            display: 'inline-block',\n            padding: '10px 15px',\n            borderRadius: '10px',\n            backgroundColor: msg.sender === 'user' ? 'var(--message-user-bg)' : 'var(--message-oracle-bg)',\n            color: msg.sender === 'user' ? 'var(--message-user-text)' : 'var(--message-oracle-text)',\n            maxWidth: '80%',\n            textAlign: 'left',\n          }}>\n            {/* We now use the magnificent ReactMarkdown component for the oracle's messages! */}\n            {msg.sender === 'oracle' ? (\n              <ReactMarkdown>{msg.text}</ReactMarkdown>\n            ) : (\n              msg.text\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n});\n\nexport default ChatHistory;\n"
      },
      {
        "file_path": "frontend/src/components/DivergenceMeter.jsx",
        "code": "import React from 'react';\n\n// A simple component to render a single \"Nixie\" digit\nconst NixieDigit = ({ digit }) => {\n  const digitStyle = {\n    fontFamily: '"Courier New", Courier, monospace',
    fontWeight: 'bold',
    fontSize: '2.5em',
    color: '#ff8c00', // A deep, glowing orange\n    textShadow: '0 0 5px #ff8c00, 0 0 10px #ff8c00, 0 0 15px #ff4500',
    margin: '0 2px',
  };
  return <span style={digitStyle}>{digit}</span>;
};

function DivergenceMeter({ divergenceNumber }) {
  const meterStyle = {
    backgroundColor: '#1a1a1a',
    border: '2px solid #333',
    borderRadius: '10px',
    padding: '10px 20px',
    marginBottom: '20px',
    boxShadow: 'inset 0 0 10px #000',
  };

  return (
    <div style={meterStyle}>
      {divergenceNumber.toString().split('').map((char, index) => (
        <NixieDigit key={index} digit={char} />
      ))}
    </div>
  );
}

export default DivergenceMeter;
"
      },
      {
        "file_path": "frontend/src/components/ProjectManager.jsx",
        "code": "import React from 'react';\nimport { FilePlus, Save } from 'react-feather'; // We summon the sacred sigils!\n\nfunction ProjectManager({ onSave, onNewProject, savedProjects, onLoadProject }) {\n  const buttonStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n    padding: '8px 15px',\n    cursor: 'pointer',\n    backgroundColor: 'var(--button-bg-color)',\n    border: 'none',\n    borderRadius: '8px',\n    color: 'var(--button-text-color)',\n    fontFamily: 'var(--font-family)',\n  };\n\n  // ... (rest of the component is the same)\n\n  return (\n    <div style={{ \n      position: 'absolute', \n      top: '20px', \n      left: '20px', \n      zIndex: 10\n    }}>\n      <div className=\"button-group\" style={{ marginBottom: '10px' }}>\n        <button onClick={onNewProject} className=\"button\" style={buttonStyle}>\n          <FilePlus size={18} />\n          New Project\n        </button>\n        <button onClick={onSave} className=\"button\" style={buttonStyle}>\n          <Save size={18} />\n          Save Project\n        </button>\n      </div>\n      <ul style={{ listStyle: 'none', padding: 0, margin: 0, maxHeight: '150px', overflowY: 'auto' }}>\n        {savedProjects && savedProjects.map((project) => (\n          <li \n            key={project.id} \n            onClick={() => onLoadProject(project.id)}\n            style={{ \n              cursor: 'pointer',\n              padding: '5px 10px',\n              backgroundColor: 'var(--secondary-accent-color)',\n              marginBottom: '5px',\n              borderRadius: '5px',\n              fontSize: '0.7em',\n            }}\n          >\n            {project.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ProjectManager;\n"
      },
      {
        "file_path": "frontend/src/components/PromptInput.jsx",
        "code": "import React, { useState } from 'react';\n\nfunction PromptInput({ onSendMessage }) {\n  const [prompt, setPrompt] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (prompt.trim() === '') return;\n    onSendMessage(prompt);\n    setPrompt('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"prompt-form\">\n      <input\n        type=\"text\"\n        value={prompt}\n        onChange={(e) => setPrompt(e.target.value)}\n        placeholder=\"Speak your command to the titan...\"\n        className=\"prompt-input\"\n      />\n    </form>\n  );\n}\n\nexport default PromptInput;\n"
      },
      {
        "file_path": "frontend/src/components/WorldlineSelector.jsx",
        "code": "import React from 'react';\n\nfunction WorldlineSelector({ worldlines, onSelect }) {\n  const selectorStyle = {\n    width: '80%',\n    maxWidth: '800px',\n    display: 'flex',\n    justifyContent: 'space-around',\n    gap: '20px',\n    padding: '20px',\n    border: '1px solid #444',\n    borderRadius: '10px',\n    backgroundColor: '#1a1a1a',\n  };\n\n  const worldlineStyle = {\n    flex: 1,\n    padding: '15px',\n    border: '1px solid #61dafb',\n    borderRadius: '8px',\n    backgroundColor: '#282c34',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  };\n\n  const divergenceTextStyle = {\n    fontFamily: '"Courier New", Courier, monospace',\n    color: '#ff8c00',\n    textShadow: '0 0 3px #ff8c00',\n    marginBottom: '10px',\n    textAlign: 'center',\n  };\n\n  const buttonStyle = {\n    padding: '10px',\n    fontSize: '0.8em',\n    backgroundColor: '#61dafb',\n    color: '#282c34',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    marginTop: '15px',\n  };\n\n  return (\n    <div style={selectorStyle}>\n      {worldlines.map((line) => (\n        <div key={line.id} style={worldlineStyle}>\n          <div style={divergenceTextStyle}>{line.divergence}</div>\n          <p style={{ fontSize: '0.8em', margin: 0 }}>{line.text.substring(0, 100)}...</p>\n          <button style={buttonStyle} onClick={() => onSelect(line)}>\n            Choose Timeline {line.id.toUpperCase()}\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default WorldlineSelector;\n"
      },
      {
        "file_path": "frontend/src/App.jsx",
        "code": "import React, { useState, useEffect, useRef } from 'react';\nimport PromptInput from './components/PromptInput';\nimport ChatHistory from './components/ChatHistory';\nimport ProjectManager from './components/ProjectManager';\nimport { RotateCcw, RotateCw, XSquare, Undo, Redo } from 'react-feather';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [undoneMessages, setUndoneMessages] = useState([]);\n  const [tokensPerSecond, setTokensPerSecond] = useState(0);\n  const [savedProjects, setSavedProjects] = useState([]);\n  const [currentProjectId, setCurrentProjectId] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const chatHistoryRef = useRef(null);\n  const abortControllerRef = useRef(null);\n\n  useEffect(() => {\n    const loadedProjects = JSON.parse(localStorage.getItem('dockracle_projects')) || [];\n    setSavedProjects(loadedProjects);\n    if (loadedProjects.length > 0) {\n      handleLoadProject(loadedProjects[0].id);\n    } else {\n      handleNewProject();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (chatHistoryRef.current) {\n      const { scrollHeight, clientHeight } = chatHistoryRef.current;\n      chatHistoryRef.current.scrollTop = scrollHeight - clientHeight;\n    }\n  }, [messages]);\n\n  const handleSaveProject = () => {\n    const projectName = prompt(\"Enter a name for this project:\", `Project ${Date.now()}`);\n    if (!projectName) return;\n\n    const newProject = {\n      id: currentProjectId || Date.now(),\n      name: projectName,\n      messages: messages,\n    };\n\n    const updatedProjects = savedProjects.filter(p => p.id !== newProject.id);\n    updatedProjects.unshift(newProject);\n    \n    setSavedProjects(updatedProjects);\n    localStorage.setItem('dockracle_projects', JSON.stringify(updatedProjects));\n    alert(`Project \"${projectName}\" saved!`);\n  };\n\n  const handleLoadProject = (projectId) => {\n    const projectToLoad = savedProjects.find(p => p.id === projectId);\n    if (projectToLoad) {\n      setMessages(projectToLoad.messages);\n      setCurrentProjectId(projectToLoad.id);\n      setUndoneMessages([]);\n    }\n  };\n\n  const handleNewProject = () => {\n    setMessages([\n      { sender: 'oracle', text: 'New Project Initialized. Awaiting Commands.' }\n    ]);\n    setCurrentProjectId(null);\n    setUndoneMessages([]);\n  };\n\n  const handleUndo = () => {\n    if (messages.length > 1) {\n      const lastMessage = messages[messages.length - 1];\n      const secondLastMessage = messages[messages.length - 2];\n      if (lastMessage.sender === 'oracle' && secondLastMessage.sender === 'user') {\n        setUndoneMessages([secondLastMessage, lastMessage]);\n        setMessages(prev => prev.slice(0, -2));\n      }\n    }\n  };\n\n  const handleRedo = () => {\n    if (undoneMessages.length > 0) {\n      setMessages(prev => [...prev, ...undoneMessages]);\n      setUndoneMessages([]);\n    }\n  };\n\n  const handleInterrupt = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      setIsStreaming(false);\n    }\n  };\n\n  const handleSendMessage = async (promptText) => {\n    setIsStreaming(true);\n    abortControllerRef.current = new AbortController();\n    \n    setUndoneMessages([]);\n    const newUserMessage = { sender: 'user', text: promptText };\n    setMessages(prev => [...prev, newUserMessage, { sender: 'oracle', text: '' }]);\n\n    let model = 'llama3.2:3b';\n    let prompt = promptText;\n\n    if (promptText.startsWith('@')) {\n      const parts = promptText.split(' ');\n      const modelMention = parts.shift();\n      model = modelMention.substring(1);\n      prompt = parts.join(' ');\n    }\n\n    try {\n      const response = await fetch('http://localhost:5100/summon', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ model: model, prompt: prompt }),\n        signal: abortControllerRef.current.signal,\n      });\n\n      if (!response.body) return;\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) {\n          setIsStreaming(false);\n          break;\n        }\n        \n        buffer += decoder.decode(value, { stream: true });\n        let boundary = buffer.indexOf('\n\n');\n        while (boundary !== -1) {\n          const chunk = buffer.substring(0, boundary);\n          buffer = buffer.substring(boundary + 2);\n          if (chunk.startsWith('data:')) {\n            const jsonString = chunk.substring(5);\n            if (jsonString.trim()) {\n              const data = JSON.parse(jsonString);\n              if (data.done) {\n                setIsStreaming(false);\n                reader.cancel();\n                return;\n              }\n              if (data.token) {\n                setMessages(prev => {\n                  const newMessages = [...prev];\n                  newMessages[newMessages.length - 1].text += data.token;\n                  return newMessages;\n                });\n              }\n            }\n          }\n          boundary = buffer.indexOf('\n\n');\n        }\n      }\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        setMessages(prev => {\n          const newMessages = [...prev];\n          newMessages[newMessages.length - 1].text += \"\n\n[STREAM INTERRUPTED]\";\n          return newMessages;\n        });\n      } else {\n        console.error(\"Error summoning the titan:\", error);\n        setMessages(prev => {\n          const newMessages = [...prev];\n          newMessages[newMessages.length - 1].text = 'Error: Could not connect to the forge.';\n          return newMessages;\n        });\n      }\n      setIsStreaming(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <ProjectManager \n        onSave={handleSaveProject} \n        onNewProject={handleNewProject}\n        savedProjects={savedProjects}\n        onLoadProject={handleLoadProject}\n      />\n      <ChatHistory messages={messages} ref={chatHistoryRef} />\n      <div className=\"input-area\" style={{width: '90%', maxWidth: '800px', display: 'flex', alignItems: 'center'}}>
        <PromptInput onSendMessage={handleSendMessage} disabled={isStreaming} />\n        {isStreaming && (\n          <button className=\"button\" onClick={handleInterrupt} style={{marginLeft: '10px'}}>
            <XSquare size={20} />\n          </button>\n        )}\n      </div>\n      <div className=\"button-group\">\n        <button className=\"button\" onClick={handleUndo}>\n          <Undo size={18} style={{ marginRight: '8px' }} />\n          Undo\n        </button>\n        <button className=\"button\" onClick={handleRedo} disabled={undoneMessages.length === 0}>\n          <Redo size={18} style={{ marginRight: '8px' }} />\n          Redo\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"
      }
    ],
    "known_facts": [
      "The application is currently broken and does not render correctly.",
      "There is a known bug related to the import of 'Undo' and 'Redo' icons from the 'react-feather' library.",
      "The backend is an Ollama-based streaming server and is assumed to be functional.",
      "The goal is to produce a single, corrected, and fully functional `App.jsx` file."
    ],
    "question": "Given the entire source code of this React application, rewrite the `App.jsx` file to fix all bugs and ensure it functions correctly. The rewritten code should be a complete, drop-in replacement for the existing `App.jsx` file."
  }